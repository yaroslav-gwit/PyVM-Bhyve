---

- hosts: pyvm_production
  tasks:

  - name: Upgrade all installed packages (see warning for the name option first!)
    community.general.pkgng:
      name: "*"
      state: latest

  - name: Install the required FreeBSD packages (baseline)
    community.general.pkgng:
      name: 
        - nano
        - bash
        - bmon
        - iftop
        - mc
        - fusefs-sshfs
        - pftop
        - py38-pexpect
        - fish
        - nginx
        - rsync
        - wireguard
        - wireguard-go
        - gnu-watch
        - tmux
        - fping
        - atop
        - qemu-utils
        - htop
        - curl
        - wget
        - gtar
        - unzip
        - pv
      state: present

  - name: Install VM-bhyve packages
    community.general.pkgng:
      name: 
        - bhyve-firmware
        - bhyve-rc
        - grub2-bhyve
        - uefi-edk2-bhyve
        - uefi-edk2-bhyve-csm
        - vm-bhyve
        - cdrkit-genisoimage
      state: present
  
  - name: Download PyVM from GitHub (or update local repo)
    shell: |
      if [[ ! -d /root/pyVM/ ]]; then
      mkdir /root/pyVM/
      git clone https://github.com/yaroslav-gwit/PyVM-Bhyve.git /root/pyVM/
      
      else
      cd /root/pyVM
      git pull
      
      fi
      
      if [[ ! -f /root/pyVM/.gitignore ]]; then echo "vm_images" > .gitignore; fi
    args:
      executable: /usr/local/bin/bash

  - name: Make BASH a default shell for user root
    ansible.builtin.user:
      name: root
      shell: /usr/local/bin/bash

  - name: Generate SSH keys if none present in the system
    shell: |
      if [[ ! -f /root/.ssh/id_rsa ]]; then ssh-keygen -b 4096 -t rsa -f /root/.ssh/id_rsa -q -N ""; else echo "Old key was found"; fi
      if [[ ! -f /root/.ssh/config ]]; then touch /root/.ssh/config && chmod 600 /root/.ssh/config; fi
    args:
      executable: /usr/local/bin/bash

  - name: Register SSH key for use with VMs
    shell: |
      cat /root/.ssh/id_rsa.pub
    args:
      executable: /usr/local/bin/bash
    register: additional_ssh_key

  - name: Enable vm_bhyve in rc.conf if needed
    lineinfile:
      dest: /etc/rc.conf
      line: vm_enable="YES"

  - name: Add vm_bhyve default dataset to rc.conf if needed
    lineinfile:
      dest: /etc/rc.conf
      line: vm_dir="zfs:zroot/vm-unencrypted"

  - name: Create VM-unencrypted dataset
    zfs:
      name: zroot/vm-unencrypted
      state: present

  - name: Check if VM-encrypted dataset is present
    shell: |
      zfs list | grep -c 'zroot/vm-encrypted' || true
    args:
      executable: /usr/local/bin/bash
    register: vm_encrypted_dataset

  - name: Create VM-encrypted dataset if needed
    ansible.builtin.expect:
      command: zfs create -o encryption=on -o keyformat=passphrase zroot/vm-encrypted
      responses:
        (?i)Enter passphrase: "{{ zfs_vm_encrypted_dataset_password }}"
    when: vm_encrypted_dataset.stdout == "0"

  - name: Check if VM-encrypted dataset is mounted
    shell: |
      zfs mount -l | grep -c /zroot/vm-encrypted || true
    args:
      executable: /usr/local/bin/bash
    register: vm_encrypted_dataset_mounted
  
  - name: Unlock and mount VM encrypted dataset if needed
    ansible.builtin.expect:
      command: zfs mount -l zroot/vm-encrypted
      responses:
        (?i)Enter passphrase(?i): "{{ zfs_vm_encrypted_dataset_password }}"
    when: vm_encrypted_dataset_mounted.stdout == "0"

  - name: Mount all encrypted child VMs if needed
    shell: |
      zfs mount -a
    args:
      executable: /usr/local/bin/bash
    when: vm_encrypted_dataset_mounted.stdout == "0"

  - name: Check if VM-bhyve is using the encrypted datastore
    shell: |
      vm datastore list | grep -c zroot/vm-encrypted || true
    args:
      executable: /usr/local/bin/bash
    register: vmbhyve_encrypted_dataset_added

  - name: Add VM-bhyve encrypted datastore if needed
    shell: |
      vm datastore add encrypted zfs:zroot/vm-encrypted
    args:
      executable: /usr/local/bin/bash
    when: vmbhyve_encrypted_dataset_added.stdout == "0"

  - name: Check if VM-bhyve default switch exists
    shell: |
      vm switch list | grep -c vm-{{ host_internal_switch_name }} || true
    args:
      executable: /usr/local/bin/bash
    register: vmbhyve_default_switch_check

  - name: Add VM-bhyve default switch if needed
    shell: |
      vm switch create {{ host_internal_switch_name }}
      #vm switch add {{ host_internal_switch_name }} {{ external_interface }}
      vm switch address {{ host_internal_switch_name }} {{ host_internal_switch_address }}/24
    args:
      executable: /usr/local/bin/bash
    when: vmbhyve_default_switch_check.stdout == "0"

  - name: Bootloader optimisations
    blockinfile:
      dest: /boot/loader.conf
      block: |
        fusefs_load="YES"
        vm.kmem_size="330M"
        vm.kmem_size_max="330M"
        vfs.zfs.arc_max="40M"
        vfs.zfs.vdev.cache.size="5M"

  - name: Copy over PF.CONF if doesn't exist
    template:
      src: "pyvm_config_files/pf.conf"
      dest: "/etc/pf.conf"
      force: no
    notify:
    - Fix PF.CONF file run 1
    - Fix PF.CONF file run 2
    - Copy over Unbound config

  - name: Add GATEWAY option to /etc/rc.conf if needed
    lineinfile:
      dest: /etc/rc.conf
      line: gateway_enable="yes"
    notify:
    - Reboot Host

  - name:  Check if PF is active in /etc/rf.conf
    shell: grep -c 'pf_enable="yes"' /etc/rc.conf || true
    args:
      executable: /usr/local/bin/bash
    register: rc_conf_pf_firewall_check

  - name: Add PF config block to /etc/rc.conf if needed
    blockinfile:
      path: /etc/rc.conf
      block: |
        pf_enable="yes"
        pf_rules="/etc/pf.conf"
        pflog_enable="yes"
        pflog_logfile="/var/log/pflog"
        pflog_flags=""
    when: rc_conf_pf_firewall_check.stdout == "0"
    notify:
    - Reboot Host

  - name: Copy over .profile template for root user
    template:
      src: "pyvm_config_files/shell_profile.conf"
      dest: "/root/.profile"

  - name: Create /ROOT/BIN directory for helper scripts
    file:
      path: /root/bin
      state: directory
      owner: root
      group: wheel
      mode: 0750

  - name: Copy host info template
    template:
      src: "pyvm_config_files/host.info"
      dest: "/root/bin/host.info"
      force: yes
      owner: root
      group: wheel
      mode: 0600
  
  - name: Install/Update helper script to clear key fingerprints
    copy:
      src: "pyvm_helper_scripts/clearfp.sh"
      dest: "/root/bin/clearfp"
      force: yes
      owner: root
      group: wheel
      mode: 0750

  - name: Install/Update PYVM helper script
    copy:
      src: "pyvm_helper_scripts/pyvm.sh"
      dest: "/root/bin/pyvm"
      force: yes
      owner: root
      group: wheel
      mode: 0750

  - name: Install/Update START_VM helper script
    copy:
      src: "pyvm_helper_scripts/startvm.sh"
      dest: "/root/bin/startvm"
      force: yes
      owner: root
      group: wheel
      mode: 0750

  - name: Initialise python dev environment
    shell: | 
      cd /root/pyVM/
      python3 -m venv .
      source bin/activate
      python3 -m pip install --upgrade pip
      python3 -m pip install -r requirements.txt
    args:
      executable: /usr/local/bin/bash

  - name:  Start all production type VMs
    shell: /root/bin/pyvm --vmstartall
    args:
      executable: /usr/local/bin/bash

  - name:  Check if NGINX config is up to date
    shell: grep -c '/usr/local/libexec/nginx/ngx_stream_module.so' /usr/local/etc/nginx/nginx.conf || true
    args:
      executable: /usr/local/bin/bash
    register: nginx_config_check
    notify:
    - Copy over NGINX config
  
  # - name: Trigger PF conf fix
  #   shell: bash -c true
  #   args:
  #     executable: /usr/local/bin/bash
  #   notify:
  #   - Fix PF.CONF file run 1
  #   - Fix PF.CONF file run 2
  #   - Reboot Host

  handlers:
    - name: Fix PF.CONF file run 1
      ansible.builtin.replace:
        path: /etc/pf.conf
        regexp: '___'
        replace: '}'

    - name: Fix PF.CONF file run 2
      ansible.builtin.replace:
        path: /etc/pf.conf
        regexp: '__'
        replace: '{'

    - name: Copy over NGINX config
      copy:
        src: "pyvm_config_files/nginx.conf"
        dest: "/usr/local/etc/nginx/nginx.conf"
        force: yes
      when: nginx_config_check.stdout == "0"

    - name: Copy over Unbound config
      copy:
        src: "pyvm_config_files/unbound.conf"
        dest: "/var/unbound/unbound.conf"
        force: yes

    - name: Reboot Host
      reboot:
